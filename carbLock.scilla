scilla_version 0

(*Utils*)
import BoolUtils IntUtils 

(***************************************************)
(*               Associated library                *)
(***************************************************)
library CarbonLock

let one_msg =
  fun (msg: Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg
  
let two_msgs =
fun (msg1 : Message) =>
fun (msg2 : Message) =>
  let msgs_tmp = one_msg msg2 in
  Cons {Message} msg1 msgs_tmp
  
  
let blk_leq =
  fun (blk1 : BNum) =>
  fun (blk2 : BNum) =>
    let bc1 = builtin blt blk1 blk2 in 
    let bc2 = builtin eq blk1 blk2 in 
    orb bc1 bc2
    

let true = True
let false = False

let zeroBlock = BNum 0
let hundredUint = Uint128 100
let oneUint = Uint128 1
let zeroUint = Uint128 0

type Error =
  | CodeContractFunded
  | CodeNotContractOwner
  | CodeBlocksNotMet
  | CodeWrongAmountSent





let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeContractFunded            => Int32 -1
      | CodeNotContractOwner          => Int32 -2
      | CodeBlocksNotMet              => Int32 -3
      | CodeWrongAmountSent           => Int32 -4
      end
    in
    { _exception : "Error"; code : result_code }


(*-------------------------------------------------*)

contract CarbLock
(
  initial_owner : ByStr20,
  carbon_contract_addr : ByStr20,
  initial: Uint128,
  reward: Uint128,
  rate: Uint128
)

(*********    Contract Details       *********)
field contract_payee : ByStr20 =  initial_owner
field pending_owner : Option ByStr20 = None {ByStr20}
field carbonContractAddr : ByStr20 = carbon_contract_addr

field contract_amount: Uint128 = Uint128 0

field fundedContract: Bool = False

field rewardPerWeek : Uint128 = Uint128 0
field rewardForLastWeek : Uint128 = Uint128 0

field howManyWeeklyRewards: Uint128 = Uint128 0

field nextRewardBlock : BNum = BNum 0
field weeklyBlocks : Uint128 = Uint128 11900
field rewardIntBlocks : Int256 = Int256 11900
procedure throwError(err : Error)
  e = make_error err;
  throw e
end

procedure isContractOwner()
  owner <- contract_payee;
  is_owner = builtin eq owner _sender;
  match is_owner with 
    | True =>
    | False =>
      err = CodeNotContractOwner;
      throwError err
  end
end



transition receiveRewards()
  isContractOwner;
  currentBlk <- & BLOCKNUMBER;
  rewardBlk <- nextRewardBlock;
  (*If reward is lesser than currentBlk or equal it should give the reward*)
  isReached = blk_leq rewardBlk currentBlk;
  match isReached with
    | True =>
      weekCount <- howManyWeeklyRewards;
      isZero = builtin eq weekCount zeroUint;
      match isZero with
        | False =>
          (*Give reward then subtract from weekly*)
          weeklyBlk <- weeklyBlocks;
          
          rewardAmount <- rewardPerWeek;
          carbonAddr <- carbonContractAddr;
          
          blockDifference = builtin bsub currentBlk rewardBlk;
          rewardInt <- rewardIntBlocks;
          rewardsDued = builtin div blockDifference rewardInt;
          uintRewardsDued = builtin to_uint128 rewardsDued;
          match uintRewardsDued with
            | None =>
            | Some num_rewards_due =>
              contract_bal <- contract_amount;
              paymentDued = builtin mul num_rewards_due rewardAmount;
              isLesserThanAvailable = builtin lt paymentDued contract_bal;
              match isLesserThanAvailable with
                | True => 
                  msg = {_tag: "Transfer"; _recipient : carbonAddr; _amount: Uint128 0; to: _sender; amount: paymentDued};
                  msgs = one_msg msg;
                  send msgs;
                  
                  
                  newBalance = builtin sub contract_bal paymentDued;
                  contract_amount := newBalance;
                  
                  newWeekly = builtin mul num_rewards_due weeklyBlk;
                  
                  countToMinus = builtin mul num_rewards_due oneUint;
                  newWeeklyCount = builtin sub weekCount countToMinus;
                  howManyWeeklyRewards := newWeeklyCount;
                  
                  nxtRewardBlk = builtin badd currentBlk newWeekly;
                  nextRewardBlock := nxtRewardBlk
                | False =>
                  howManyWeeklyRewards := zeroUint;
                  amount_to_send <- contract_amount;
                  msg = {_tag: "Transfer"; _recipient : carbonAddr; _amount: Uint128 0; to: _sender; amount: amount_to_send};
                  msgs = one_msg msg;
                  send msgs;
                  contract_amount := zeroUint
              end
          end
        | True =>
          (*Check contract amount the give last week rewards*)
          carbonAddr <- carbonContractAddr;
          amount_to_send <- contract_amount;
          msg = {_tag: "Transfer"; _recipient : carbonAddr; _amount: Uint128 0; to: _sender; amount: amount_to_send};
          msgs = one_msg msg;
          send msgs;
          contract_amount := zeroUint
      end
    | False=>
      err = CodeBlocksNotMet;
      throwError err
  end
end





(*Change Owner of Contract*)
transition RequestOwnershipTransfer(new_owner : ByStr20)
  owner <- contract_payee;
  isOwner = builtin eq _sender owner;
  match isOwner with
    | True =>
      po = Some {ByStr20} new_owner;
      pending_owner := po
    | False =>
      err = CodeNotContractOwner;
      throwError err
  end
end

transition ConfirmOwnershipTransfer()
  optional_po <- pending_owner;
  match optional_po with
  | Some optional_po =>
      caller_is_new_owner = builtin eq _sender optional_po;
      match caller_is_new_owner with
      | True =>
          (* transfer ownership *)
          contract_payee := optional_po;
          none = None {ByStr20};
          pending_owner := none
      | False => (* the caller is not the new owner, do nothing*)
        err = CodeNotContractOwner;
        throwError err
      end
  | None => (* ownership transfer is not in-progress, do nothing *)
  end
end





transition RecipientAcceptTransfer(
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
  funded <- fundedContract;
  match funded with
    | True =>
      err = CodeContractFunded;
      throwError err
    | False =>
      weeklyBlk <- weeklyBlocks;
      contract_balance = builtin add initial reward;
      contract_amount := contract_balance;
      
      isCorrectFunded = builtin eq contract_balance amount;
      match isCorrectFunded with
        | True =>
          onePercent = builtin div contract_balance hundredUint;
          perWeekReward = builtin mul onePercent rate;
          rewardPerWeek := perWeekReward;
          
          finalWeekRate = builtin rem hundredUint rate;
          lastWeekReward = builtin mul finalWeekRate onePercent;
          rewardForLastWeek := lastWeekReward;
          
          weekCount = builtin div hundredUint rate;
          howManyWeeklyRewards := weekCount;
          
          current_blk <- & BLOCKNUMBER;
          firstRewardBlk = builtin badd current_blk weeklyBlk;
          nextRewardBlock := firstRewardBlk;
          fundedContract := true
        | False =>
          err = CodeWrongAmountSent;
          throwError err
      end
  end
end

transition TransferSuccessCallBack(
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
end
